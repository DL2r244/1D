module alchitry_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led[8],          // 8 user controllable LEDs
    input usb_rx,           // USB->Serial input
    output usb_tx,          // USB->Serial output
    output io_led[3][8],    // LEDs on IO Shield
    output io_segment[8],   // 7-segment LEDs on IO Shield
    output io_select[4],    // Digit select on IO Shield
    input io_button[5],     // 5 buttons on IO Shield
    input io_dip[3][8]      // DIP switches on IO Shield
) {

    sig rst    
    sig disable_led  
    sig button_0_pressed
    sig io_led1_active
    sig lit_led_index[2]
    sig level[32]
    

    const SIZE = 32
    
    
 
    const CLOCK_DIVIDER = $is_sim() ? 9 : 27
    const CLK_FREQ = $is_sim() ? 1000 : 100000000
    const SEVEN_SEG_DIV = $is_sim() ? 3 : 16 // put 6 for sim, 16 on hardware
   const SLOW_CLK = $is_sim() ? 8 : 25


    .clk(clk) {
        reset_conditioner reset_cond
        button_conditioner io_button_0(.in(io_button[0]), #CLK_FREQ(CLK_FREQ))
        button_conditioner io_button_1(.in(io_button[1]), #CLK_FREQ(CLK_FREQ))
        button_conditioner io_button_2(.in(io_button[2]), #CLK_FREQ(CLK_FREQ))
        button_conditioner io_button_3(.in(io_button[3]), #CLK_FREQ(CLK_FREQ))
        button_conditioner io_button_4(.in(io_button[4]), #CLK_FREQ(CLK_FREQ))



        edge_detector slow_clock_edge(#RISE(1), #FALL(0))

        .rst(rst){
             multi_seven_seg seg(#DIV(SEVEN_SEG_DIV)) 

            dff counter[SIZE]
            dff disable_led_ff(#INIT(0))
            dff button_0_flag_ff(#INIT(0)); 
            dff counter2[28]
            dff counter3[5](#INIT(5))
            dff io_led1_ff(#INIT(0))
            dff lives[5](#INIT(0))
            dff button_handler[3](#INIT(0))
            counter slow_clk(#SIZE(1), #DIV(CLOCK_DIVIDER))
            counter slow_clk2(#SIZE(1), #DIV(SLOW_CLK))
        }
        edge_detector button_0_edge(#RISE(1), #FALL(0), .in(io_button_0.out))
        edge_detector button_1_edge(#RISE(1), #FALL(0), .in(io_button_1.out))
        edge_detector button_2_edge(#RISE(1), #FALL(0), .in(io_button_2.out))
        edge_detector button_3_edge(#RISE(1), #FALL(0), .in(io_button_3.out))
        edge_detector button_4_edge(#RISE(1), #FALL(0), .in(io_button_4.out))




        random_number_generator generator(.slow_clk(slow_clk2.value), 
            .refresh(io_button_0.out))
    }
    
    bin_to_dec decimal_renderer(#DIGITS(2), #LEADING_ZEROS(1))
    bin_to_dec down_counter(#DIGITS(2), #LEADING_ZEROS(1)) // Down counter

  
    alu alu;
    enum States{
        LEVEL1,
        LEVEL2,
        LEVEL3
    }
   dff state[4](#INIT(States.LEVEL1),.clk(clk));

    
    always {
        reset_cond.in = ~rst_n  // input raw inverted reset signal
        rst = reset_cond.out    // conditioned reset
        
        led = 8h00              // turn LEDs off
        io_led[2] = 4b0000
        io_led[0] = 4b0000
        usb_tx = usb_rx         // loop serial port
        counter.d = counter.q
        counter2.d = counter2.q+ 1
        lives.d = lives.q

        
        
        button_handler.d = button_handler.q
        io_led1_ff.d = 0
        io_led1_active = io_led1_ff.q  
        

        
        //seg_multiplex.d = seg_multiplex.q
        slow_clock_edge.in = slow_clk.value
        state.d = state.q
        if (rst) {
            state.d = States.LEVEL1;
        }
  
     
        button_0_pressed = button_0_flag_ff.q;
        lit_led_index = generator.out[1:0]
        
       
        if (button_0_edge.out) {
            button_0_flag_ff.d = 1;  // Set flag when button 0 is pressed
        }
        
        alu.a = 0;
        alu.b = 0;
        alu.alufn = 0
        
        if (button_0_pressed && io_led1_active) {
    // Check which LED index is active and which button is pressed
        if (lit_led_index == 1 && button_1_edge.out) {
            disable_led_ff.d = !disable_led_ff.q
            alu.a = lives.q;
            alu.b = 1;
            alu.alufn = 6b000000;
            lives.d = alu.out;
            
                
             
                
        } else if (lit_led_index == 2 && button_2_edge.out) {
            disable_led_ff.d = !disable_led_ff.q
               
            alu.a = lives.q;
            alu.b = 1;
            alu.alufn = 6b000000;
            lives.d = alu.out;
               
        } else if (lit_led_index == 3 && button_3_edge.out) {
            disable_led_ff.d = !disable_led_ff.q
             alu.a = lives.q;
            alu.b = 1;
            alu.alufn = 6b000000;
            lives.d = alu.out;
               
        } else if (lit_led_index == 4 && button_4_edge.out) {
             disable_led_ff.d = !disable_led_ff.q
              alu.a = lives.q;
            alu.b = 1;
            alu.alufn = 6b000000;
            lives.d = alu.out;            
        } 
          
       
         
}       
        disable_led = disable_led_ff.q
          if (button_0_pressed){
            if(slow_clock_edge.out && counter3.q >0){
              alu.a = counter3.q;
              alu.b = 1;
              alu.alufn = 6b000001;  // SUBTRACT operation
              counter3.d = alu.out;
            }
        }
        
         if (slow_clock_edge.out) {
             disable_led_ff.d = 0;  // Re-enable LED
        }
       
        if(lives.q == 3){
            disable_led_ff.d = 1
        }
        
       
        if (counter3.q == 0){
            disable_led_ff.d = 1
            io_led[0][0] =1
        }
        
        level = state.q
        // Set io_led[1] based on disable_led flag
        if (disable_led) {
            io_led[1] = 8h00   // Turn off io_led[1]
        } else {
            io_led[1] = 8h00
            if (counter2.q[$is_sim() ? 10 : 26]){
                io_led[1][lit_led_index] = 1;
                io_led1_ff.d = 1 
            }
            
        }
        
        case(state.q){
            States.LEVEL1:
            io_led[2][lives.q] = 1
                if (disable_led) {
                    io_led[1] = 8h00   // Turn off io_led[1]
                } else {
                    io_led[1] = 8h00
                    if (counter2.q[$is_sim() ? 11 : 26]){
                        io_led[1][lit_led_index] = 1;
                         io_led1_ff.d = 1 
                    }
            
                }
                if (io_dip[0][0]==1){
                    state.d = States.LEVEL2
                }
              
            States.LEVEL2:
          
                io_led[2][lives.q] = 1
                if (disable_led) {
                    io_led[1] = 8h00   // Turn off io_led[1]
                } else {
                    io_led[1] = 8h00
                    if (counter2.q[$is_sim() ? 9 : 25]){
                        io_led[1][lit_led_index] = 1;
                         io_led1_ff.d = 1 
                    }
            
                }
       
                
            if(io_dip[0][1] == 1){
                state.d = States.LEVEL3    
                }
            States.LEVEL3:
                io_led[2][lives.q] = 1
                if (disable_led) {
                    io_led[1] = 8h00   // Turn off io_led[1]
                } else {
                    io_led[1] = 8h00
                    if (counter2.q[$is_sim() ? 8 : 24]){
                        io_led[1][lit_led_index] = 1;
                         io_led1_ff.d = 1 
                    }
            
                }
            
        }
            
                    
                        
            
        
          
               
         
      
        
        
        decimal_renderer.value = counter.q
        down_counter.value =counter3.q
         seg.values[0] = decimal_renderer.digits[0] 
         seg.values[1] = decimal_renderer.digits[1] 
         seg.values[2] = down_counter.digits[0]
         seg.values[3] = down_counter.digits[1]
        
        //io_segment = ~encoder.segs[seg_multiplex.q]
        //io_select = ~seg_selector.out
        io_segment = ~seg.seg
        io_select = ~seg.sel

    }
}