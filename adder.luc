module adder #(
    SIZE ~ 32 : SIZE > 1
)(
    input a[SIZE],
    input b[SIZE],
    input alufn_signal[6],
    output out[SIZE],
    output z,
    output v,
    output n
) {
    
   //to fill in
    rca rca(#SIZE(32))
    sig xb[SIZE]
    
    always {
        xb = b ^ 32x{alufn_signal[0]}
        //            32 bit, 1 bit so x32
        rca.a = a
        rca.b = xb
        rca.cin = alufn_signal[0]
        
        // implement adder/subtractor unit logic here
        out = rca.s
        z = ~| rca.s // | means OR
        v = (a[SIZE-1] & xb[SIZE-1] & ~rca.s[SIZE-1]) | (~a[SIZE-1] & ~xb[SIZE-1] & rca.s[SIZE-1]) //sum overflow
        //(sum overflow) positive and positive -> negative  OR  negative and negative  -> positive
        n = rca.s[SIZE-1]
        
    }
}